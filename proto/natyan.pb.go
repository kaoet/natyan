// Code generated by protoc-gen-go.
// source: natyan.proto
// DO NOT EDIT!

/*
Package natyan is a generated protocol buffer package.

It is generated from these files:
	natyan.proto

It has these top-level messages:
	AcceptRequest
	AcceptResponse
	ConnectRequest
	ConnectResponse
*/
package natyan

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type AcceptRequest struct {
	Channel int32 `protobuf:"varint,1,opt,name=channel" json:"channel,omitempty"`
}

func (m *AcceptRequest) Reset()                    { *m = AcceptRequest{} }
func (m *AcceptRequest) String() string            { return proto.CompactTextString(m) }
func (*AcceptRequest) ProtoMessage()               {}
func (*AcceptRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *AcceptRequest) GetChannel() int32 {
	if m != nil {
		return m.Channel
	}
	return 0
}

type AcceptResponse struct {
	Port int32 `protobuf:"varint,1,opt,name=port" json:"port,omitempty"`
}

func (m *AcceptResponse) Reset()                    { *m = AcceptResponse{} }
func (m *AcceptResponse) String() string            { return proto.CompactTextString(m) }
func (*AcceptResponse) ProtoMessage()               {}
func (*AcceptResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *AcceptResponse) GetPort() int32 {
	if m != nil {
		return m.Port
	}
	return 0
}

type ConnectRequest struct {
	Channel int32 `protobuf:"varint,1,opt,name=channel" json:"channel,omitempty"`
}

func (m *ConnectRequest) Reset()                    { *m = ConnectRequest{} }
func (m *ConnectRequest) String() string            { return proto.CompactTextString(m) }
func (*ConnectRequest) ProtoMessage()               {}
func (*ConnectRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *ConnectRequest) GetChannel() int32 {
	if m != nil {
		return m.Channel
	}
	return 0
}

type ConnectResponse struct {
	Port int32 `protobuf:"varint,1,opt,name=port" json:"port,omitempty"`
}

func (m *ConnectResponse) Reset()                    { *m = ConnectResponse{} }
func (m *ConnectResponse) String() string            { return proto.CompactTextString(m) }
func (*ConnectResponse) ProtoMessage()               {}
func (*ConnectResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *ConnectResponse) GetPort() int32 {
	if m != nil {
		return m.Port
	}
	return 0
}

func init() {
	proto.RegisterType((*AcceptRequest)(nil), "natyan.AcceptRequest")
	proto.RegisterType((*AcceptResponse)(nil), "natyan.AcceptResponse")
	proto.RegisterType((*ConnectRequest)(nil), "natyan.ConnectRequest")
	proto.RegisterType((*ConnectResponse)(nil), "natyan.ConnectResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Natyan service

type NatyanClient interface {
	Accept(ctx context.Context, in *AcceptRequest, opts ...grpc.CallOption) (*AcceptResponse, error)
	Connect(ctx context.Context, in *ConnectRequest, opts ...grpc.CallOption) (*ConnectResponse, error)
}

type natyanClient struct {
	cc *grpc.ClientConn
}

func NewNatyanClient(cc *grpc.ClientConn) NatyanClient {
	return &natyanClient{cc}
}

func (c *natyanClient) Accept(ctx context.Context, in *AcceptRequest, opts ...grpc.CallOption) (*AcceptResponse, error) {
	out := new(AcceptResponse)
	err := grpc.Invoke(ctx, "/natyan.Natyan/Accept", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *natyanClient) Connect(ctx context.Context, in *ConnectRequest, opts ...grpc.CallOption) (*ConnectResponse, error) {
	out := new(ConnectResponse)
	err := grpc.Invoke(ctx, "/natyan.Natyan/Connect", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Natyan service

type NatyanServer interface {
	Accept(context.Context, *AcceptRequest) (*AcceptResponse, error)
	Connect(context.Context, *ConnectRequest) (*ConnectResponse, error)
}

func RegisterNatyanServer(s *grpc.Server, srv NatyanServer) {
	s.RegisterService(&_Natyan_serviceDesc, srv)
}

func _Natyan_Accept_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AcceptRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NatyanServer).Accept(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/natyan.Natyan/Accept",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NatyanServer).Accept(ctx, req.(*AcceptRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Natyan_Connect_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConnectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NatyanServer).Connect(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/natyan.Natyan/Connect",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NatyanServer).Connect(ctx, req.(*ConnectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Natyan_serviceDesc = grpc.ServiceDesc{
	ServiceName: "natyan.Natyan",
	HandlerType: (*NatyanServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Accept",
			Handler:    _Natyan_Accept_Handler,
		},
		{
			MethodName: "Connect",
			Handler:    _Natyan_Connect_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "natyan.proto",
}

func init() { proto.RegisterFile("natyan.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 208 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xe2, 0xe2, 0xc9, 0x4b, 0x2c, 0xa9,
	0x4c, 0xcc, 0xd3, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x83, 0xf0, 0x94, 0x34, 0xb9, 0x78,
	0x1d, 0x93, 0x93, 0x53, 0x0b, 0x4a, 0x82, 0x52, 0x0b, 0x4b, 0x53, 0x8b, 0x4b, 0x84, 0x24, 0xb8,
	0xd8, 0x93, 0x33, 0x12, 0xf3, 0xf2, 0x52, 0x73, 0x24, 0x18, 0x15, 0x18, 0x35, 0x58, 0x83, 0x60,
	0x5c, 0x25, 0x15, 0x2e, 0x3e, 0x98, 0xd2, 0xe2, 0x82, 0xfc, 0xbc, 0xe2, 0x54, 0x21, 0x21, 0x2e,
	0x96, 0x82, 0xfc, 0xa2, 0x12, 0xa8, 0x42, 0x30, 0x5b, 0x49, 0x8b, 0x8b, 0xcf, 0x39, 0x3f, 0x2f,
	0x2f, 0x35, 0x99, 0x08, 0x13, 0x55, 0xb9, 0xf8, 0xe1, 0x6a, 0x71, 0x1b, 0x69, 0xd4, 0xc8, 0xc8,
	0xc5, 0xe6, 0x07, 0x76, 0xae, 0x90, 0x25, 0x17, 0x1b, 0xc4, 0x0d, 0x42, 0xa2, 0x7a, 0x50, 0xff,
	0xa0, 0x38, 0x5f, 0x4a, 0x0c, 0x5d, 0x18, 0x62, 0xae, 0x12, 0x83, 0x90, 0x0d, 0x17, 0x3b, 0xd4,
	0x32, 0x21, 0xb8, 0x22, 0x54, 0x97, 0x4a, 0x89, 0x63, 0x88, 0xc3, 0x74, 0x3b, 0x69, 0x45, 0x69,
	0xa4, 0x67, 0x96, 0x64, 0x94, 0x26, 0xe9, 0x25, 0xe7, 0xe7, 0xea, 0xe7, 0xe7, 0xa5, 0x96, 0x94,
	0xe7, 0xa7, 0xe7, 0xe7, 0xeb, 0x43, 0x34, 0xe8, 0x83, 0x03, 0xd5, 0x1a, 0xc2, 0x49, 0x62, 0x03,
	0xf3, 0x8c, 0x01, 0x01, 0x00, 0x00, 0xff, 0xff, 0xb2, 0x98, 0x2e, 0x3c, 0x72, 0x01, 0x00, 0x00,
}
